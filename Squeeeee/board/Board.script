local options = require("options.options")
local highscores = require("hiscores.hiscores")

local BOARD_OFFSET_X = 160
local BOARD_OFFSET_Y = 0
local COLUMN_WIDTH = 64
local ROW_HEIGHT = 64
local BOARD_COLUMNS = 10
local BOARD_ROWS = 10
local CURSOR_TILE = 16
local GREEN_TILE = 15
local RED_TILE = 14
local EMPTY_TILE = 0
local MINIMUM_TILE = 1
local COMPLETION_GOAL = 90
local MAXIMUM_TILE = 8

local board_tiles = {}
local board_glow = {}
local hover_column = -1
local hover_row = -1
local score = 0
local level = 1
local shuffle_enabled = true
local sfx_table = {
	"/Board#sfx1",
	"/Board#sfx2",
	"/Board#sfx3",
	"/Board#sfx4",
	"/Board#sfx5",
	"/Board#sfx6",
	"/Board#sfx7",
	"/Board#sfx8"
}

options.load()

local function current_maximum_tile()
	return math.min(3 + level, MAXIMUM_TILE)
end

local function reset_board()
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			board_tiles[column][row]=math.random(MINIMUM_TILE, current_maximum_tile())
			board_glow[column][row]=0
		end
	end
end

local function get_percentage()
	local count = 100
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			if board_tiles[column][row]~=0 then
				count = count - 1
			end
		end
	end
	return count
end

local function reset_game()
	level=1
	score=0
	reset_board()
end

local function get_rightmost_column()
	for column = BOARD_COLUMNS, 1, -1 do
		if board_tiles[column][1] ~= 0 then
			return column
		end
	end
	return 0
end

math.randomseed(100000 * (socket.gettime() % 1))
for column = 1, BOARD_COLUMNS do
	board_tiles[column]={}
	board_glow[column]={}
	for row = 1, BOARD_ROWS do
		board_tiles[column][row]=0
		board_glow[column][row]=0
	end
end
reset_game()

function init(self)
	msg.post(".", "acquire_input_focus")
end

local deltas = {
	{x=0,y=1},
	{x=1,y=0},
	{x=0,y=-1},
	{x=-1,y=0}
}

local function get_neighbor_count(column, row)
	if column<1 or row<1 or column>BOARD_COLUMNS or row>BOARD_ROWS then return 0 end
	if board_tiles[column][row] == 0 then return 0 end
	local result = 0
	local current_tile = board_tiles[column][row]
	for _, delta in ipairs(deltas) do
		local next_column = column + delta.x
		local next_row = row + delta.y
		if next_column>=1 and next_row>=1 and next_column<=BOARD_COLUMNS and next_row<=BOARD_ROWS then
			local next_tile = board_tiles[next_column][next_row]
			if current_tile == next_tile then
				result = result + 1
			end
		end
	end
	return result
end

local function has_move_left()
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			if get_neighbor_count(column, row)>0 then
				return true
			end
		end
	end
	return false
end

local function set_tile_glow(column, row)
	if column<1 or row<1 or column>BOARD_COLUMNS or row>BOARD_ROWS then return end
	if board_tiles[column][row] == 0 then return end
	if board_glow[column][row] ~= 0 then return end
	if get_neighbor_count(column, row) == 0 then
		board_glow[column][row] = RED_TILE
	else
		board_glow[column][row] = GREEN_TILE
		for _, delta in ipairs(deltas) do
			local next_column = column + delta.x
			local next_row = row + delta.y
			if next_column>=1 and next_row>=1 and next_column<=BOARD_COLUMNS and next_row<=BOARD_ROWS then
				local current_tile = board_tiles[column][row]
				local next_tile = board_tiles[next_column][next_row]
				if current_tile == next_tile then
					set_tile_glow(next_column, next_row)
				end
			end
		end
	end
end

local function update_glow()
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			board_glow[column][row] = 0
		end
	end
	if hover_column>=1 and hover_column<=BOARD_COLUMNS and hover_row>=1 and hover_row<=BOARD_ROWS then
		set_tile_glow(hover_column, hover_row)
	end
end

local function remove_tile(column, row)
	if board_glow[column][row] == GREEN_TILE then
		for r = row, BOARD_ROWS - 1 do
			board_tiles[column][r] = board_tiles[column][r+1]
			board_glow[column][r] = board_glow[column][r+1]
		end
		board_tiles[column][BOARD_ROWS] = 0
		board_glow[column][BOARD_ROWS] = 0
	end
end

local function remove_columns()
	local slide = true
	while slide do
		slide = false
		for column = BOARD_COLUMNS, 2, -1 do
			if board_tiles[column][1] ~= 0 and board_tiles[column-1][1] == 0 then
				local removed = table.remove(board_tiles, column - 1)
				table.insert(board_tiles, removed)
				slide = true
			end
		end
	end
end

local function make_move()
	if hover_column>=1 and hover_row>=1 and hover_column<=BOARD_COLUMNS and hover_row<=BOARD_ROWS and get_neighbor_count(hover_column, hover_row) > 0 then
		if options.sfx_enabled then
			sound.play(sfx_table[board_tiles[hover_column][hover_row]],{speed=0.9+math.random()*0.2})
		end
	end
	local count = 0
	local rightmost = get_rightmost_column()
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			while board_glow[column][row] == GREEN_TILE do
				count = count + 1
				remove_tile(column, row)
			end
		end
	end
	score = score + count * (count - 1) / 2
	remove_columns()
	local columns_eliminated = rightmost - get_rightmost_column()
	print(columns_eliminated)
	score = score + columns_eliminated * level * 100
	update_glow()	
end

local function next_level()
	level = level + 1
	reset_board()
end

local function update_token_count()
	local token_count = 0
	if hover_column>=1 and hover_column<=BOARD_COLUMNS and hover_row>=1 and hover_row<=BOARD_ROWS then
		local token = board_tiles[hover_column][hover_row]
		for column = 1, BOARD_COLUMNS do
			for row = 1, BOARD_ROWS do
				if board_tiles[column][row]==token then
					token_count = token_count + 1
				end
			end
		end
	end
	if token_count>0 then
		label.set_text("/Board#token_count_label", "#Tokens: "..token_count)
	else
		label.set_text("/Board#token_count_label", "")
	end
end

function update(self, dt)
	local group_size = 0
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			local tile = EMPTY_TILE
			if column==hover_column and row==hover_row then
				tile = CURSOR_TILE
			end
			tilemap.set_tile("/Board#Board","hilite",column,row,tile)
			tile = board_tiles[column][row]
			tilemap.set_tile("/Board#Board","foreground",column,row,tile)
			tile = board_glow[column][row]
			if tile~=0 then
				group_size = group_size + 1
			end
			tilemap.set_tile("/Board#Board","glow",column,row,tile)
		end
	end
	label.set_text("/Board#score_label", "Score: "..score)
	label.set_text("/Board#group_label", "Group: "..group_size)
	label.set_text("/Board#level_label", "Level: "..level)
	update_token_count()
	label.set_text("/Board#high_score_label", "High: "..highscores.get_high_score())
	label.set_text("/Board#avg_score_label", "Avg: "..highscores.get_average_score())
	label.set_text("/Board#games_played_label", "#Games: "..highscores.get_games_played())
	local completion = get_percentage()
	label.set_text("/Board#percentage_label", "Complete: "..completion.."%")
	if completion>=COMPLETION_GOAL then
		msg.post("/Board#restart_button", "next_level_qualified")
	else
		msg.post("/Board#restart_button", "next_level_disqualified")
	end
	if has_move_left() then
		msg.post("/Board#restart_button", "moves_left")
	else
		msg.post("/Board#restart_button", "no_moves_left")
	end
	if shuffle_enabled then
		msg.post("/Board#restart_button", "shuffle_enabled")
	else
		msg.post("/Board#restart_button", "shuffle_disabled")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("reset") then
		highscores.record_game(score)
		reset_game()
	elseif message_id == hash("next_level") then
		next_level()
	end
end

function on_input(self, action_id, action)
	if action_id == nil then
		hover_column = math.floor((action.x - BOARD_OFFSET_X) / COLUMN_WIDTH) + 1
		hover_row = math.floor((action.y - BOARD_OFFSET_Y) / ROW_HEIGHT) + 1
		update_glow()
	elseif action_id==hash("click") and action.pressed then
		make_move()
	end
end
