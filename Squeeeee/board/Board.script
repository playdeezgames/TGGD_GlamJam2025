local BOARD_OFFSET_X = 160
local BOARD_OFFSET_Y = 0
local COLUMN_WIDTH = 64
local ROW_HEIGHT = 64
local BOARD_COLUMNS = 10
local BOARD_ROWS = 10
local CURSOR_TILE = 16
local GREEN_TILE = 15
local RED_TILE = 14
local EMPTY_TILE = 0
local MINIMUM_TILE = 1
local MAXIMUM_TILE = 4

local board_tiles = {}
local board_glow = {}
local hover_column = -1
local hover_row = -1

math.randomseed(100000 * (socket.gettime() % 1))
for column = 1, BOARD_COLUMNS do
	board_tiles[column]={}
	board_glow[column]={}
	for row = 1, BOARD_ROWS do
		board_tiles[column][row]=math.random(MINIMUM_TILE, MAXIMUM_TILE)
		board_glow[column][row]=0
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0.75, 1, 0) } )
end

local function update_glow()
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			board_glow[column][row] = 0
		end
	end
	if hover_column>=1 and hover_column<=BOARD_COLUMNS and hover_row>=1 and hover_row<=BOARD_ROWS then
		board_glow[hover_column][hover_row] = RED_TILE
	end
end

function update(self, dt)
	for column = 1, BOARD_COLUMNS do
		for row = 1, BOARD_ROWS do
			local tile = EMPTY_TILE
			if column==hover_column and row==hover_row then
				tile = CURSOR_TILE
			end
			tilemap.set_tile("/Board#Board","hilite",column,row,tile)
			tile = board_tiles[column][row]
			tilemap.set_tile("/Board#Board","foreground",column,row,tile)
			tile = board_glow[column][row]
			tilemap.set_tile("/Board#Board","glow",column,row,tile)
		end
	end
end

--function on_message(self, message_id, message, sender)
--end

function on_input(self, action_id, action)
	if action_id == nil then
		hover_column = math.floor((action.x - BOARD_OFFSET_X) / COLUMN_WIDTH) + 1
		hover_row = math.floor((action.y - BOARD_OFFSET_Y) / ROW_HEIGHT) + 1
		update_glow()
	end
end
