local options = require("options.options")

local SPEAKER_ON = "speaker_on"
local SPEAKER_OFF = "speaker_off"
local SHUFFLE = "shuffle"
local BOMB_BASE = "bomb_base"

function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
end

function update(self, dt)
	gui.set_visible(gui.get_node(SPEAKER_ON), not options.sfx_enabled)
	gui.set_visible(gui.get_node(SPEAKER_OFF), options.sfx_enabled)
end

function on_message(self, message_id, message, sender)
	local reset_button_base =gui.get_node("reset_button_base")
	local reset_button_text = gui.get_node("reset_button_text")
	local next_level_button_base =gui.get_node("next_level_button_base")
	local next_level_button_text = gui.get_node("next_level_button_text")
	local shuffle = gui.get_node("shuffle")
	local bomb_base = gui.get_node("bomb_base")
	local bomb_text = gui.get_node("bomb_text")
	if message_id==hash("moves_left") then
		gui.set_visible(reset_button_base, false)	
		gui.set_visible(reset_button_text, false)	
	elseif message_id==hash("no_moves_left") then
		gui.set_visible(reset_button_base, not gui.get_visible(next_level_button_base))	
		gui.set_visible(reset_button_text, not gui.get_visible(next_level_button_base))	
	elseif message_id==hash("next_level_qualified") then
		gui.set_visible(next_level_button_base, true)	
		gui.set_visible(next_level_button_text, true)	
	elseif message_id==hash("next_level_disqualified") then
		gui.set_visible(next_level_button_base, false)	
		gui.set_visible(next_level_button_text, false)
	elseif message_id == hash("shuffle_enabled") then
		gui.set_visible(shuffle, true)	
	elseif message_id == hash("shuffle_disabled") then
		gui.set_visible(shuffle, false)	
	elseif message_id == hash("update_bombs") then
		if message.active then
			gui.set_color(bomb_base, vmath.vector4(1,0,0,1))
		else
			gui.set_color(bomb_base, vmath.vector4(0.5,0,0.5,1))
		end
		if message.bombs>0 then
			gui.set_visible(bomb_base, true)	
			gui.set_visible(bomb_text, true)	
			if message.active then
				gui.set_text(bomb_text, "!")
			else
				gui.set_text(bomb_text, ""..message.bombs)
			end
		else
			gui.set_visible(bomb_base, false)	
			gui.set_visible(bomb_text, false)	
		end
	end
end

local function update_button_hilite(base_node, text_node, x, y)
	if gui.pick_node(base_node, x, y) then
		gui.set_color(text_node, vmath.vector4(1,1,1,1))
	else
		gui.set_color(text_node, vmath.vector4(0.5, 0, 0.5, 1))
	end
end

function on_input(self, action_id, action)
	local reset_button_base =gui.get_node("reset_button_base")
	local reset_button_text = gui.get_node("reset_button_text")
	local next_level_button_base =gui.get_node("next_level_button_base")
	local next_level_button_text = gui.get_node("next_level_button_text")
	local speaker_button = gui.get_node(SPEAKER_ON)
	local shuffle_button = gui.get_node(SHUFFLE)
	local bomb_button = gui.get_node(BOMB_BASE)
	if action_id==nil then
		update_button_hilite(reset_button_base, reset_button_text, action.x, action.y)
		update_button_hilite(next_level_button_base, next_level_button_text, action.x, action.y)
	elseif action_id == hash("click") and action.pressed then
		if gui.pick_node(reset_button_base, action.x, action.y) and gui.get_visible(reset_button_base) then
			msg.post("/Board", "reset")
		end
		if gui.pick_node(next_level_button_base, action.x, action.y) and gui.get_visible(next_level_button_base) then
			msg.post("/Board", "next_level")
		end
		if gui.pick_node(speaker_button, action.x, action.y) then
			options.sfx_enabled = not options.sfx_enabled
			options.save()
		end
		if gui.pick_node(shuffle_button, action.x, action.y) and gui.get_visible(shuffle_button) then
			msg.post("/Board", "shuffle")
		end
		if gui.pick_node(bomb_button, action.x, action.y) and gui.get_visible(bomb_button) then
			msg.post("/Board", "click_bomb")
		end
	end
end
